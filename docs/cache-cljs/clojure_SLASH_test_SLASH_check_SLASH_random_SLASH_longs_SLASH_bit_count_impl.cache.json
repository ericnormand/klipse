["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:use-macros",["^ "],"~:excludes",["~#set",["~$bit-count"]],"~:name","~$clojure.test.check.random.longs.bit-count-impl","~:imports",null,"~:requires",null,"~:uses",null,"~:defs",["^ ","~$lookup",["^ ","~:meta",["^ ","~:file","^7","~:line",18,"~:column",16,"~:end-line",18,"~:end-column",22,"~:private",true],"^C",true,"^6","~$clojure.test.check.random.longs.bit-count-impl/lookup","^>","clojure/test/check/random/longs/bit_count_impl.cljs","^B",22,"^@",1,"^?",18,"^A",18,"~:tag","~$array"],"^5",["^ ","~:protocol-inline",null,"^=",["^ ","^>","^7","^?",26,"^@",7,"^A",26,"^B",16,"~:arglists",["~#list",["~$quote",["^I",[["~$x"]]]]],"~:doc","Returns a JS number (not a Long), the number of set bits in the\n  given Long."],"^6","~$clojure.test.check.random.longs.bit-count-impl/bit-count","~:variadic",false,"^>","clojure/test/check/random/longs/bit_count_impl.cljs","^B",16,"~:method-params",["^I",[["~$x"]]],"~:protocol-impl",null,"~:arglists-meta",["^I",[null,null]],"^@",1,"^?",26,"^A",26,"~:max-fixed-arity",1,"~:fn-var",true,"^H",["^I",["^J",["^I",[["~$x"]]]]],"^K","Returns a JS number (not a Long), the number of set bits in the\n  given Long."]],"~:require-macros",["^ "],"^K",null]