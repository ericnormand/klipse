["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$re-frame.fx","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^;","~$re-frame.interceptor","^<","~$re-frame.events","^=","~$re-frame.registrar","^>","~$router","~$re-frame.router","^@","^@","~$events","^=","~$re-frame.loggers","^B","~$re-frame.db","^C"],"~:uses",["^ ","~$console","^B","~$app-db","^C","~$->interceptor","^<","~$set-timeout!","^;","~$get-handler","^>","~$clear-handlers","^>","~$register-handler","^>"],"~:defs",["^ ","~$kind",["^ ","^7","~$re-frame.fx/kind","~:file","re_frame/fx.cljc","~:line",14,"~:column",1,"~:end-line",14,"~:end-column",10,"~:meta",["^ ","^O","^8","^P",14,"^Q",6,"^R",14,"^S",10],"~:tag","~$cljs.core/Keyword"],"~$register",["^ ","^7","~$re-frame.fx/register","^O","re_frame/fx.cljc","^P",16,"^Q",1,"^R",16,"^S",14,"^T",["^ ","^O","^8","^P",16,"^Q",6,"^R",16,"^S",14],"^U","~$any"],"~$do-fx",["^ ","^T",["^ ","^O","^8","^P",20,"^Q",6,"^R",20,"^S",11],"^7","~$re-frame.fx/do-fx","^O","re_frame/fx.cljc","^S",11,"^Q",1,"^P",20,"^R",20,"^U","^Y","~:doc","An interceptor which actions a `context's` (side) `:effects`.\n\n  For each key in the `:effects` map, call the `effects handler` previously\n  registered using `reg-fx`.\n\n  So, if `:effects` was:\n      {:dispatch  [:hello 42]\n       :db        {...}\n       :undo      \"set flag\"}\n  call the registered effects handlers for each of the map's keys:\n  `:dispatch`, `:undo` and `:db`."]],"~:require-macros",["^ "],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:db","~:do-fx","~:dispatch-n","~:deregister-event-handler","~:dispatch","~:after","~:id","~:effects","~:error","~:ms","~:fx","~:dispatch-later"]],"~:order",["^1>","^1:","^15","^19","^1;","^1?","^1=","^18","^1<","^16","^17","^14"]],"^10",null]