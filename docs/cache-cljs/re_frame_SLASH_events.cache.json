["^ ","~:rename-macros",["^ "],"~:renames",["^ "],"~:externs",["^ ","~$Error",["^ "]],"~:use-macros",["^ "],"~:excludes",["~#set",[]],"~:name","~$re-frame.events","~:imports",null,"~:requires",["^ ","~$re-frame.interop","^;","~$re-frame.interceptor","^<","~$re-frame.trace","^=","~$re-frame.registrar","^>","~$interceptor","^<","~$trace","^=","~$re-frame.utils","^A","~$re-frame.loggers","^B","~$re-frame.db","^C"],"~:uses",["^ ","~$console","^B","~$app-db","^C","~$get-handler","^>","~$first-in-vector","^A","~$empty-queue","^;","~$debug-enabled?","^;","~$register-handler","^>"],"~:defs",["^ ","~$kind",["^ ","^7","~$re-frame.events/kind","~:file","re_frame/events.cljc","~:line",11,"~:column",1,"~:end-line",11,"~:end-column",10,"~:meta",["^ ","^O","^8","^P",11,"^Q",6,"^R",11,"^S",10],"~:tag","~$cljs.core/Keyword"],"~$flatten-and-remove-nils",["^ ","~:protocol-inline",null,"^T",["^ ","^O","^8","^P",14,"^Q",8,"^R",14,"^S",31,"~:private",true,"~:arglists",["~#list",["~$quote",["^[",[["~$id","~$interceptors"]]]]],"~:doc","~`interceptors` might have nested collections, and contain nil elements.\n  return a flat collection, with all nils removed.\n  This function is 9/10 about giving good error messages"],"^Y",true,"^7","~$re-frame.events/flatten-and-remove-nils","~:variadic",false,"^O","re_frame/events.cljc","^S",31,"~:method-params",["^[",[["^11","^12"]]],"~:protocol-impl",null,"~:arglists-meta",["^[",[null,null]],"^Q",1,"^P",14,"^R",14,"~:max-fixed-arity",2,"~:fn-var",true,"^Z",["^[",["^10",["^[",[["^11","^12"]]]]],"^13","~`interceptors` might have nested collections, and contain nil elements.\n  return a flat collection, with all nils removed.\n  This function is 9/10 about giving good error messages"],"~$register",["^ ","^X",null,"^T",["^ ","^O","^8","^P",35,"^Q",7,"^R",35,"^S",15,"^Z",["^[",["^10",["^[",[["^11","^12"]]]]],"^13","Associate the given event `id` with the given collection of `interceptors`.\n\n   `interceptors` may contain nested collections and there may be nils\n   at any level,so process this structure into a simple, nil-less vector\n   before registration.\n\n   An `event handler` will likely be at the end of the chain (wrapped in an interceptor)."],"^7","~$re-frame.events/register","^15",false,"^O","re_frame/events.cljc","^S",15,"^16",["^[",[["^11","^12"]]],"^17",null,"^18",["^[",[null,null]],"^Q",1,"^P",35,"^R",35,"^19",2,"^1:",true,"^Z",["^[",["^10",["^[",[["^11","^12"]]]]],"^13","Associate the given event `id` with the given collection of `interceptors`.\n\n   `interceptors` may contain nested collections and there may be nils\n   at any level,so process this structure into a simple, nil-less vector\n   before registration.\n\n   An `event handler` will likely be at the end of the chain (wrapped in an interceptor)."],"~$*handling*",["^ ","^T",["^ ","^O","^8","^P",50,"^Q",16,"^R",50,"^S",26,"~:dynamic",true],"^7","~$re-frame.events/*handling*","^O","re_frame/events.cljc","^S",26,"^Q",1,"^1>",true,"^P",50,"^R",50,"^U","~$clj-nil"],"~$handle",["^ ","^X",null,"^T",["^ ","^O","^8","^P",52,"^Q",7,"^R",52,"^S",13,"^Z",["^[",["^10",["^[",[["~$event-v"]]]]],"^13","Given an event vector, look up the associated intercepter chain, and execute it."],"^7","~$re-frame.events/handle","^15",false,"^O","re_frame/events.cljc","^S",13,"^16",["^[",[["^1B"]]],"^17",null,"^18",["^[",[null,null]],"^Q",1,"^P",52,"^R",52,"^19",1,"^1:",true,"^Z",["^[",["^10",["^[",[["^1B"]]]]],"^13","Given an event vector, look up the associated intercepter chain, and execute it."]],"~:require-macros",["^ ","^@","^=","^=","^="],"~:cljs.analyzer/constants",["^ ","~:seen",["^6",["~:event","~:error","~:operation","~:op-type","~:tags","~:start","~:duration","~:end"]],"~:order",["^1G","^1H","^1I","^1J","^1K","^1L","^1M","^1N"]],"^13",null]